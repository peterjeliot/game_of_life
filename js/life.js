// Generated by CoffeeScript 1.9.3
(function() {
  var Life, grid, life, options, seeds,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

  Life = (function(superClass) {
    extend(Life, superClass);

    Life.prototype.dirs = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];

    function Life(props) {
      this.render = bind(this.render, this);
      this.step = bind(this.step, this);
      this.onClick = bind(this.onClick, this);
      this.loadSeed = bind(this.loadSeed, this);
      var grid, interval, padding, ref, wrap;
      Life.__super__.constructor.call(this, props);
      grid = props.grid, this.options = props.options;
      ref = this.options, padding = ref.padding, interval = ref.interval, wrap = ref.wrap;
      this.left = padding.left, this.right = padding.right, this.top = padding.top, this.bottom = padding.bottom;
      this.loadSeed("R-Pentomino");
      setInterval(this.step, interval);
    }

    Life.prototype.loadSeed = function(name) {
      var i, ref, results, seed;
      seed = this.parse(this.options.seeds[name]);
      this.options.width = seed[0].length + this.left + this.right;
      this.options.height = seed.length + this.top + this.bottom;
      this.grid = (function() {
        results = [];
        for (var i = 0, ref = this.options.height; 0 <= ref ? i < ref : i > ref; 0 <= ref ? i++ : i--){ results.push(i); }
        return results;
      }).apply(this).map((function(_this) {
        return function() {
          var i, ref, results;
          return (function() {
            results = [];
            for (var i = 0, ref = _this.options.width; 0 <= ref ? i < ref : i > ref; 0 <= ref ? i++ : i--){ results.push(i); }
            return results;
          }).apply(this).map(function() {
            return false;
          });
        };
      })(this));
      seed.forEach((function(_this) {
        return function(row, r) {
          return row.forEach(function(cell, c) {
            return _this.grid[r + _this.top][c + _this.left] = cell;
          });
        };
      })(this));
      return this.setState({
        data: this.grid
      });
    };

    Life.prototype.parse = function(string) {
      var lines;
      lines = string.split("\n");
      return lines.map(function(line) {
        return line.split("").map(function(char) {
          return char === "*";
        });
      });
    };

    Life.prototype.onClick = function(event) {
      return this.loadSeed(event.currentTarget.value);
    };

    Life.prototype.isAlive = function(r, c) {
      if (!this.options.wrap && ((r === (-1) || r === this.grid.length) || (c === (-1) || c === this.grid[0].length))) {
        return false;
      }
      return this.grid[modulo(r, this.options.height)][modulo(c, this.options.width)];
    };

    Life.prototype.step = function() {
      var i, ref, results;
      this.grid = (function() {
        results = [];
        for (var i = 0, ref = this.grid.length; 0 <= ref ? i < ref : i > ref; 0 <= ref ? i++ : i--){ results.push(i); }
        return results;
      }).apply(this).map((function(_this) {
        return function(r) {
          var i, ref, results;
          return (function() {
            results = [];
            for (var i = 0, ref = _this.grid[0].length; 0 <= ref ? i < ref : i > ref; 0 <= ref ? i++ : i--){ results.push(i); }
            return results;
          }).apply(this).map(function(c) {
            var n;
            n = _this.neighborsAlive(r, c);
            if (_this.isAlive(r, c)) {
              return n === 2 || n === 3;
            } else {
              return n === 3;
            }
          });
        };
      })(this));
      return this.setState({
        data: this.grid
      });
    };

    Life.prototype.neighborsAlive = function(r, c) {
      return this.dirs.map((function(_this) {
        return function(arg) {
          var dc, dr, ref;
          dr = arg[0], dc = arg[1];
          return (ref = _this.isAlive(r + dr, c + dc)) != null ? ref : {
            1: 0
          };
        };
      })(this)).reduce(function(a, b) {
        return a + b;
      });
    };

    Life.prototype.toString = function() {
      return "\n" + this.grid.map(function(row, r) {
        return " " + row.map(function(cell, c) {
          if (cell) {
            return "*";
          } else {
            return ".";
          }
        }).reduce(function(a, b) {
          return a + b;
        });
      }).reduce(function(a, b) {
        return a + "\n" + b;
      });
    };

    Life.prototype.render = function() {
      var c, cell, div, input, name, pattern, r, ref, row, state;
      ref = React.DOM, div = ref.div, input = ref.input;
      return div(null, div(null, (function() {
        var ref1, results;
        ref1 = this.options.seeds;
        results = [];
        for (name in ref1) {
          pattern = ref1[name];
          results.push(input({
            type: "button",
            value: name,
            onClick: this.onClick
          }));
        }
        return results;
      }).call(this)), div({
        className: "grid"
      }, (function() {
        var i, len, ref1, results;
        ref1 = this.grid;
        results = [];
        for (r = i = 0, len = ref1.length; i < len; r = ++i) {
          row = ref1[r];
          results.push(div({
            className: "row",
            key: "row" + r
          }, (function() {
            var j, len1, results1;
            results1 = [];
            for (c = j = 0, len1 = row.length; j < len1; c = ++j) {
              cell = row[c];
              state = (this.isAlive(r, c) ? "alive" : "dead");
              results1.push(div({
                key: "col" + c,
                className: "cell " + state
              }));
            }
            return results1;
          }).call(this)));
        }
        return results;
      }).call(this)));
    };

    return Life;

  })(React.Component);

  seeds = {
    "Methuselah": " *\n   *\n**  ***",
    "R-Pentomino": " **\n**\n *",
    "Glider": "***    ***\n*        *\n *      *\n\n\n *      *\n*        *\n***    ***"
  };

  grid = [[false, true, true], [true, true, false], [false, true, false]];

  options = {
    seeds: seeds,
    interval: 1000 / 10,
    wrap: true,
    padding: {
      left: 20,
      right: 20,
      top: 20,
      bottom: 20
    }
  };

  life = React.createElement(Life, {
    "grid": grid,
    "options": options
  });

  React.render(life, document.getElementById('content'));

}).call(this);
